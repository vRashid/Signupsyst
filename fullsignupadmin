import os

USERS_FILE = "users.txt"
LOG_FILE = "log.txt"

# Ensure the users file exists
if not os.path.exists(USERS_FILE):
    open(USERS_FILE, "w").close()

# Ensure the log file exists
if not os.path.exists(LOG_FILE):
    open(LOG_FILE, "w").close()

def log_activity(user, action):
    """Logs user activity to a file."""
    with open(LOG_FILE, "a") as log:
        log.write(f"{user} - {action}\n")

def handle_errors(func):
    """Decorator for error handling."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            print(f"An error occurred: {e}")
            return None
    return wrapper

@handle_errors
def signup():
    """Registers a new user."""
    while True:
        email = input("Enter your email: ")
        if "@" in email and "." in email:
            break
        print("Invalid email format. Try again.")

    while True:
        password = input("Enter your password (min 6 characters): ")
        if len(password) >= 6:
            break
        print("Password must be at least 6 characters.")

    role = input("Enter role (user/admin): ").strip().lower()
    if role not in ["user", "admin"]:
        role = "user"  # Default role

    with open(USERS_FILE, "a") as file:
        file.write(f"{email} {password} {role}\n")

    log_activity(email, "Signed up")
    print("Registration successful!")

@handle_errors
def login():
    """Logs in a user."""
    email = input("Enter your email: ")
    password = input("Enter your password: ")

    with open(USERS_FILE, "r") as file:
        users = file.readlines()

    for user in users:
        saved_email, saved_password, role = user.strip().split()
        if email == saved_email and password == saved_password:
            log_activity(email, "Logged in")
            print(f"Login successful! Welcome, {email} ({role}).")

            if role == "admin":
                admin_panel()
            else:
                user_dashboard(email)
            return

    print("Invalid email or password. Try again.")

def user_dashboard(email):
    """User menu after login."""
    while True:
        print("\n1. Delete Account")
        print("2. Logout")
        choice = input("Choose an option: ")

        if choice == "1":
            delete_account(email)
        elif choice == "2":
            log_activity(email, "Logged out")
            print("Logged out successfully.")
            break
        else:
            print("Invalid option. Try again.")

def admin_panel():
    """Admin menu for managing users."""
    while True:
        print("\nAdmin Panel")
        print("1. View Users")
        print("2. Delete User")
        print("3. Reset User Password")
        print("4. Logout")
        choice = input("Choose an option: ")

        if choice == "1":
            view_users()
        elif choice == "2":
            email = input("Enter email to delete: ")
            delete_account(email, admin=True)
        elif choice == "3":
            reset_password()
        elif choice == "4":
            print("Logged out as Admin.")
            break
        else:
            print("Invalid option. Try again.")

@handle_errors
def view_users():
    """Displays all registered users."""
    with open(USERS_FILE, "r") as file:
        users = file.readlines()

    if not users:
        print("No users found.")
    else:
        print("\nRegistered Users:")
        for user in users:
            email, _, role = user.strip().split()
            print(f"{email} ({role})")

@handle_errors
def delete_account(email, admin=False):
    """Deletes a user account."""
    with open(USERS_FILE, "r") as file:
        users = file.readlines()

    with open(USERS_FILE, "w") as file:
        for user in users:
            if not user.startswith(email):
                file.write(user)

    log_activity(email, "Account deleted")
    if admin:
        print(f"User {email} deleted by Admin.")
    else:
        print("Your account has been deleted.")
        exit()

@handle_errors
def reset_password():
    """Admin resets a user's password."""
    email = input("Enter the email to reset password: ")

    with open(USERS_FILE, "r") as file:
        users = file.readlines()

    found = False
    new_users = []
    for user in users:
        saved_email, saved_password, role = user.strip().split()
        if email == saved_email:
            new_password = input("Enter new password: ")
            new_users.append(f"{email} {new_password} {role}\n")
            found = True
        else:
            new_users.append(user)

    with open(USERS_FILE, "w") as file:
        file.writelines(new_users)

    if found:
        log_activity(email, "Password reset by Admin")
        print("Password reset successful.")
    else:
        print("User not found.")

def main():
    """Main function to choose between login and signup."""
    while True:
        print("\n1. Signup")
        print("2. Login")
        print("3. Exit")
        choice = input("Choose an option: ")

        if choice == "1":
            signup()
        elif choice == "2":
            login()
        elif choice == "3":
            print("Goodbye!")
            exit()
        else:
            print("Invalid option. Try again.")

if __name__ == "__main__":
    main()